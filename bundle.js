(function (d3) {
  'use strict';

  const brushChart = (selection,props) => {
    const {
      width,
      height,
      xValue,
      yValue,
      xAxisLabel,
      yAxisLabel,
      colorValue,
      setBrushCoords,
      xScaleDomain,
      trendline,
      titleText,
      titleXAdjust,
      titleYAdjust
    } = props;
    
    const margin = { top: 20, bottom: 30, right: 50, left:50};
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    const decimalFormat = d3.format("0.4f");
    
    let { data } = props;
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, d => d.value))
      .range([innerHeight, 0]);

    const xScale = d3.scaleTime()
      .domain(
        xScaleDomain
          ? xScaleDomain
          : d3.extent(data, d => d.Date)
      )
      .range([0, innerWidth]);
    
    const colorScale = d3.scaleOrdinal()
      .domain(['OW2DWL', 'OW2DSWL'])
      .range(['orange', 'blue']);
    
    let g = selection.selectAll('.container').data([null]);
    g = g.enter().append('g').attr('class', 'container')
      .merge(g)
        .attr('transform', `translate(${margin.left},${margin.top})`);
       
    const yAxis = d3.axisLeft(yScale);
    const xAxis = d3.axisBottom(xScale);  
     
    const lineGenerator = d3.line()
      .x(d => xScale(d.Date))
      .y(d => yScale(d.value));
    
    const nested = d3.nest()
      .key(colorValue)
      .entries(data);
   
    colorScale.domain(nested.map(d => d.key));
    
    const yAxisG = g.selectAll('.y-axis').data([null]);
    yAxisG.enter().append('g').attr('class', 'y-axis')
      .merge(yAxisG)
        .call(yAxis)
    		.append('text')
    		.attr('class', 'yAxisRight-label')
    		.attr('x', 50)
    		.attr('y', -7)
    		.text(yAxisLabel)
    		.attr('font-size', '15px');
    
    const xAxisG = g.selectAll('.x-axis').data([null]);
    xAxisG.enter().append('g').attr('class', 'x-axis')
      .merge(xAxisG)
        .attr('transform', `translate(0,${innerHeight})`)
        .call(xAxis)
    		.append('text')
    		.attr('class', 'xAxisBottom-label')
    		.attr('x', -20)
    		.attr('y', 16)
    		.text(xAxisLabel)
    		.attr('font-size', '15px');
    
    const title = g.selectAll('.title').data([null]);
    title.enter().append('text')
      .attr('class', 'title')
      .attr('y', titleYAdjust)
      .attr('x', titleXAdjust)
      .text(titleText);
    
    const linePath = g.selectAll('.line-path').data(nested);
    linePath
      .enter().append('path')
        .attr('class', 'line-path')
      .merge(linePath)
        .attr('d', d => lineGenerator(d.values))
        .attr('stroke', d => colorScale(d.key));
    
    
    if(trendline){
      const trendlineBrush = g.selectAll('.trendline').data(trendline);
      trendlineBrush.enter().append('line').attr('class', 'trendline')
       .merge(trendlineBrush)
        .attr('x1', d=> xScale(d[0]))
        .attr('y1', d=> yScale(d[1]))
        .attr('x2', d=> xScale(d[2]))
        .attr('y2', d=> yScale(d[3]));
    
       const trendlineText = g.selectAll('.text-label').data(trendline);
       trendlineText.enter().append('text').attr('class', 'text-label')
         .attr("x", d => 0)
  			 .attr("y", d => innerHeight/2)
  		     .merge(trendlineText)
             .attr('transform', `translate(${0},${160})`)
             .text(d => `Eq: ${decimalFormat(d[4])}x 
													 ${decimalFormat(d[5]) >= 0 
                             ? ' + ' 
                             : '  '}${decimalFormat(d[5])}`);
      
    }
    
    const brushed = () => {
      if (d3.event.selection) {
        setBrushCoords(d3.event.selection.map(xScale.invert));
      }
    };
   
    
    const brush = d3.brushX()
      .extent([[0,0], [innerWidth,innerHeight]])
      .on("brush end", brushed);
    
    if (setBrushCoords) {
      g.call(brush);
    }
    
  };

  const leastSquares = (data) => {
      const xValue = d => d.Date;
      const yValue = d => d.value;
      const xDates = data.map(xValue);
  		const xSeries = d3.range(1, xDates.length +1);
      const x1 = xDates[0];
      const x2 = xDates[xDates.length - 1];
     	const ySeries = data.map(yValue);

      const reduceSumFunc = (prev, cur) => prev + cur;
  		
  		const xBar = xSeries.reduce(reduceSumFunc) * 1.0 / xSeries.length;
  		const yBar = ySeries.reduce(reduceSumFunc) * 1.0 / ySeries.length;

  		const ssXX = xSeries.map(d => Math.pow(d - xBar, 2))
  			.reduce(reduceSumFunc);
  		
  		const ssYY = ySeries.map(d => Math.pow(d - yBar, 2))
  			.reduce(reduceSumFunc);
  			
  		const ssXY = xSeries.map((d, i) => (d - xBar) * (ySeries[i] - yBar))
  			.reduce(reduceSumFunc);
  			
  		const slope = ssXY / ssXX;
  		const intercept = yBar - (xBar * slope);
  		const rSquare = Math.pow(ssXY, 2) / (ssXX * ssYY);
      const xSeriesLength = xSeries.length;
      const y1 = slope + intercept;
  	  const y2 = slope * xSeriesLength + intercept;
      const trendData = [[x1,y1,x2,y2,slope,intercept,rSquare]];
  		
  		return trendData;
  	};

  const colorLegend = (selection, props) => {
    const { 
      colorScale, 
      height, 
      circleRadius,
      spacing,
      textOffset
    } = props;
    
    const groups = selection.selectAll('g')
      .data(colorScale.domain());
    const groupsEnter = groups.enter().append('g')
      .attr('transform', (d, i) => 
            `translate(0, ${i * spacing})`);
    groupsEnter
      .merge(groups);
    groups.exit().remove();
    
    groupsEnter.append('circle')
      .merge(groups.select('circle'))
        .attr('r', circleRadius)
        .attr('fill', colorScale);
    
    groupsEnter.append('text')
      .attr('class','legend-text')
      .merge(groups.select('text'))
        .text(d => d)
        .attr('dy', '0.32em')
        .attr('x', textOffset);
  };

  const hist =(selection, props) => {
  const {
  width,
  height,
  xValue,
  yValue,
  xScaleDomain
  } = props;

  const margin = { top: 20, bottom: 30, right: 50, left:50};
  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;
  let { EFData } = props;
  const yScaleB = d3.scaleLinear()
  .domain(d3.extent(EFData, yValue))
  .range([0, innerHeight]);

  const xScale = d3.scaleTime()
  .domain(
  xScaleDomain
  ? xScaleDomain
  : d3.extent(EFData, d => d.Date)
  )
  .range([0, innerWidth]);


  const yAxisB = d3.axisRight(yScaleB);
  const xAxis = d3.axisBottom(xScale);  
  let g = selection.selectAll('.container').data([null]);
  g = g.enter().append('g').attr('class', 'container')
  .merge(g)
  .attr('transform', `translate(${margin.left},${margin.top})`);

  const yAxisGB = g.selectAll('.y-axisb').data([null]);
  yAxisGB.enter().append('g').attr('class', 'y-axisb')
  .merge(yAxisGB)
  .attr('transform', `translate(${innerWidth}, 0)`)
  .call(yAxisB);

  const xAxisG = g.selectAll('.x-axis').data([null]);
  xAxisG.enter().append('g').attr('class', 'x-axis')
  .merge(xAxisG)
  .attr('transform', `translate(0,${innerHeight})`)
  .call(xAxis);

  selection.selectAll('defs').data([null])
  .enter().append("defs")
  .append("clipPath")
  .attr("id", "clip")
  .append("rect")
  .attr("width", innerWidth)
  .attr("height", innerHeight);

  const rectBars = g.selectAll('rect').data(EFData);
  rectBars 
  .enter()
  .append('rect')
  .attr('class', 'bars')
  .merge(rectBars)
  .attr('height', d => yScaleB(yValue(d)))
  .attr('x', d => xScale(xValue(d)))
  .attr('y', d => 0)
  .attr('width', 5);

  rectBars.exit().remove();

  };

  // You can import API functions like this from D3.js.
  const parseDate = d3.timeParse("%d/%m/%Y");
  const parseEFDate = d3.timeParse("%m/%y");
  const formatDate = d3.timeFormat("%b %Y");

  let data = [];
  let EFData = [];

  let brushCoords = null;
  let filteredData = null;
  let trendline = null;


  const colorScale = d3.scaleOrdinal()
    .domain([
      'Effective Rainfall',
      'Observation well 2 deep', 
      'Observation well 2 shallow', 
      'Regreesion Line: month(x) with Observation measurement(y) '
    ])
    .range(['#60bfff','orange', 'blue', 'red']);

  const svg0 = d3.select('#legend');
  const svg1 = d3.select('#main-chart');
  const svg2 = d3.select('#brush-chart');

  svg0.append('g')
    .attr('transform', `translate(80,20)`)
    .call(colorLegend,({
      colorScale,
      circleRadius: 7,
      spacing: 17,
      textOffset: 15
    })
  );

  const render = () => {
    brushChart(svg1, {
      width: +svg1.attr('width'),
      height: +svg1.attr('height'),
      data,
      titleText: "",
      titleXAdjust: 130,
      titleYAdjust: 20,
      colorValue: d => d.wl,
      circleRadius: 2,
      xAxisLabel: 'Date',
      yAxisLabel: 'Water Level',
      xScaleDomain: brushCoords,
      trendline
    });
    
      hist(svg1,{
      width: +svg1.attr('width'),
      height: +svg1.attr('height'),
      xScaleDomain: brushCoords,
      EFData,
      xValue: d => d.Date,
      yValue: d => d.EffectiveRainfall
    });
    
    brushChart(svg2, {
      width: +svg2.attr('width'),
      height: +svg2.attr('height'),
      data,
      colorValue: d => d.wl,
      circleRadius: 2,
      xAxisLabel: 'Date',
      yAxisLabel: 'Water Level',
      setBrushCoords: coords => {
        brushCoords = coords;
        filteredData = data
          .filter(d => d.Date >= brushCoords[0] && d.Date <= brushCoords[1]);
        trendline = leastSquares(filteredData);
        render();
      }
    });
  };

  const wls =["OW2DWL", "OW2DSWL"];
  d3.csv('./monthlyViz.csv')
    .then(loadedData => {
    loadedData.forEach(row => {
      wls.forEach(wl => {
      if(row[wl]!==undefined && row[wl] > 0){
      data.push({
  			Date:parseDate(row.Date),
        wl,
        value: +row[wl]
      	});
      }});
    });
  });

  d3.csv('./MonthlyER.csv')
    .then(loadedEFData => {
    loadedEFData.forEach(row =>
      EFData.push({
      Date: parseEFDate(row.Date),
      EffectiveRainfall: +row.EffectiveRainfall
      }));
  });


  setTimeout(()=>{
  	render();
  }, 1000);

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
